#!/usr/bin/ruby
# encoding: utf-8
# Copyright 2012 by Niklaus Giger <niklaus.giger@member.fsf.org
#
# All rights reserved. This program and the accompanying materials
# are made available under the terms of the Eclipse Public License v1.0
# which accompanies this distribution, and is available at
# http://www.eclipse.org/legal/epl-v10.html
#

layout[:target] = File.join(Elexis::get_deploy_dir, 'elexis-opensource')
test_installation = 'elexis-test_installation'
packName = 'elexis-izpack'
ProductInfoFile = _('branding.product')
install_xml = File.expand_path(File.join(Elexis::get_deploy_dir, 'elexis_installer.xml'))
packFile = File.join(Elexis::get_deploy_dir, "elexis-#{project.parent.version}-installer.jar")
packFileShort =  File.join(Elexis::get_deploy_dir, "elexis-installer.jar")

require 'buildrizpack'
tgtBase  = IzPack::platform2path(IzPack::getDefaultPlatform, '.')
allPlatforms = IzPack::getPlatforms.clone # we want a unique instance here!
osPath = File.join(project.path_to(:target), 'os')
task(:package => packFileShort)
package(:izpack, :file=> packFile).input = install_xml
package(:izpack).izpackVersion = '4.3.5'
package(:izpack).include(install_xml)
task(packFileShort => package(:izpack))  do
  FileUtils.rm(packFileShort) if File.exists?(packFileShort)
  # Cannot create a symbolic link under windows
  FileUtils.ln_s(File.basename(packFile), packFileShort, :force => true, :verbose => true) unless /mingw|bccwin|wince|cygwin|mswin32/i.match(RbConfig::CONFIG['host_os'])
end

task(install_xml => [ task(:doc),  project.parent.task(:doc)] )
unless Wikitext::skipDoc
  handbuch =  File.join(project.parent.path_to(:target), 'doc', 'elexis.pdf')
  french   =  File.join(project.parent.path_to(:target), 'doc', 'doc_fr', 'elexis.pdf')
  task(install_xml => [ project('dokumentation').task('doc'), project('doc_fr').task('doc') ])
end

@os_p = File.expand_path(File.join(_, '..','..','elexis-addons', 'ch.ngiger.elexis.opensource'))
puts "Setup: Medelexis-Build gets some files from opensource in #{@os_p}"
def os_p(path)
  return File.join(@os_p, path)
end

product = EclipseExtension::readProductInfo(ProductInfoFile)
allPacks = []

# here we define the project which generates IzPack installers for all supported operations systems
# using only plug-ins under a free (as in freedom) license
jars = []
kernProjects = [
  'ch.elexis.core',
  'ch.elexis.eigenartikel',
  'ch.elexis.h2.connector',
  'ch.elexis.importer.div',
  'ch.elexis',
  'ch.elexis.mysql.connector',
  'ch.elexis.postgresql.connector',
  'ch.elexis.scripting.beanshell',
  'ch.ngiger.elexis.branding',
  'ch.rgw.utility',
  'de.fhdo.elexis.perspective',
  'LogBackend',
  'org.iatrix.help.wiki',
  'org.ekkescorner.logging.osgi',
  ]
chProjects = [
  'ch.elexis.arzttarife_ch',
  'ch.elexis.ebanking_ch',
  'ch.elexis.diagnosecodes_ch',
  'ch.elexis.labortarif.ch2009',
  'ch.elexis.artikel_ch',
  'ch.ngiger.elexis.oddb_ch',
]
chPack = BuildrIzPack::Pack.new('Schweiz (deutsch)', 'Abrechnungs- und Diagnosesysteme Schweiz' )
kernPack = BuildrIzPack::Pack.new('Elexis-Kern', 'Elexis-Hauptprogramm', { 'required' => 'yes' })
kernPack.addFile(File.join(project._, 'rsc', 'logback.xml'), '$INSTALL_PATH/configuration/logback.xml')
libPack = BuildrIzPack::Pack.new('Eclipse-Bibliotheken', 'Eclipse Bibliotheken, welche von Elexis Plug-Ins benutzt werden', { 'required' => 'yes' })
chPack = BuildrIzPack::Pack.new('Schweiz (deutsch)', 'Abrechnungs- und Diagnosesysteme Schweiz' )

osJars = []
allPacks << IzPack::addPackIfProject(project, osJars, 'strukturiertere Erfassung der KG (von Antoine Kaufmann)',
                          %(Plugin fuer eine etwas strukturiertere Erfassung der KG. Die Daten dafuer
werden wo moeglich in die Elexis-Felder gespeichert (bei den Feldern pro
Patient, die im Patientenblatt schon vorhanden sind), der Rest (die
Textfelder und Zeit pro Konsultation werden in einer separaten Tabelle
abgelegt (dadurch fehlt aber Momentan noch die "Revisionsverwaltung", der
Eintraege)).

Der Teil mit der Medikamentenkarte benutzt die Elexis-Interne Fixmedikation,
funktioniert aber Momentan nur mit Medikamenten die in der Favoriten-
Medikamentenliste enthalten sind (verknuepfen aber auch nur auf normale
Elexis Artikel).
Die Medikamentenkarte sollte in Zukunft wohl als eigenes Plugin entwickelt
werden.),
    [ 'ch.elexis.icpc', 'com.hilotec.elexis.kgview',]
)

allPacks << IzPack::addPackIfProject(project, osJars, 'Text-Plugin OpenDocument (von Antoine Kaufmann)',
                  %(Freies alternatives Text-Plugin fuer Elexis. Sollte mit jeder Textverarbeitung
funktionieren, welche das OpenDocument-Format unterstützt. Das Plugin generiert
ODT-Files und öffnet sie danach mit dem konfigurierten Programm.),
  [ 'com.hilotec.elexis.opendocument' ]
)

allPacks << IzPack::addPackIfProject(project, osJars, 'Text-Plugin (noa-libre) (von Jörg Sigle)',
  %(Ein TextPlugin für Elexis, aktualisiert auf Basis von noa-libre, mit verbesserter Stabilität.
Name des Plugins: com.jsigle.noatext_jsl.

Ausführliche Informationen auf: http://www.jsigle.com/prog/elexis#NOAText_jsl

Status: BETA.
    Keinerlei Gewährleistung!
    Verwendung ausschliesslich auf eigene Verantwortung!
    Sachkundiger Anwender, eigene Funktionstests in
    unkritischer Umgebung und gute Backups dringend empfohlen!

Lizenz: Vorläufig GPL Version 2.1) ,
  [ 'com.jsigle.noatext_jsl' ]
)

allPacks << IzPack::addPackIfProject(project, osJars, 'Medelexis Text Templator (von Gerry Weirich)',
  %(Das Elexis Textsystem ist zwar recht flexibel und Leistungsfähig,
hat dafür aber auch den Nachteil, nicht unter allen  Betriebssystemen gleichermassen gut zu funktionieren. zum Beispiel Mac OXS und Ubuntu/Gnome.

Dieses Plugin ersetzt das Standard-Textsystem gegen ein schablonenbasiertes Konzept, welches unter allen Betriebssystemen funktioniert, dafür aber etwas weniger flexibel ist.
Anstatt OpenOffice direkt ins Elexis-Fenster einzubinden, werden hier Schablonen von vorhandenen bzw. vorher erstellten Dokumenten verwendet, durch Ersetzen von definierten Textstellen gezielt verändert und wieder abgespeichert, so dass sie anschliessend halbautomatisch wieder vom dafür geeigneten systemeigenen Programm weiterverarbeitet werden können. Die Konfiguration ist somit jetzt ein zweistufiger Prozess: Für jedes Dokument muss eine Vorlage und ein Übersetzungsschema erstellt werden. S. weiter unten unter Konfiguration. Somit spielt weder die Textverarbeitung noch das Zielsystem eine Rolle. Das Konzept sollte mit Microsoft Word ebenso funktionieren können, wie mit MacWrite oder KNotepad, oder eben mit OpenOffice. Das einzige was man braucht, ist ein passender Schablonenprozessor.),
  [ 'ch.medelexis.text.templator' ]
)
allPacks.reject! { |item| item == nil } # Remove nil packages, if a project was not defined!

# common line to sync opensource and medelexis buildfile.project again

allPacks << kernPack
allPacks << chPack
allPacks << libPack
allProjects = (kernProjects + chProjects)
allProjects.each {
  |proj|
    task(install_xml => project(proj).task(:doc)) # for the pack 'Dokumentation'
    dependencies << project(proj)
    jars << project(proj).package(:plugin).to_s if project(proj).package(:plugin)
    project(proj).dependencies.each {|aDep|
                                      jars << aDep if /.jar/.match(aDep.to_s)
                                    }
}

file project._('target/rsc') do FileUtils.makedirs project._('target/rsc') end
DemoDB = '2.1.5.4'
demoZipFile = File.join(project._, 'rsc', "demoDB_elexis_#{DemoDB}.zip")
download(demoZipFile => "http://ftp.medelexis.ch/downloads_opensource/elexis/demoDB/demoDB_elexis_#{DemoDB}.zip")


# target platform see also http://eclipse.dzone.com/articles/simplifying-p2f-process-part-2
# Übersicht Build-Systeme für Eclipse http://www.google.com/url?sa=t&rct=j&q=&esrc=s&source=web&cd=1&ved=0CCoQFjAA&url=http%3A%2F%2Fwww.nilshartmann.net%2Ffiles%2FBuild_my_bundle.pdf&ei=7us8T8H5H4S0-QaZwNDJBQ&usg=AFQjCNHMXqO66-oZ7pwuj4h_JEOI673_Ow
# oRsc  = File.expand_path(File.join(project._, '..', '..', 'elexis-base', 'BuildElexis', 'rsc'))
pRsc  = File.expand_path(File.join(project._, 'rsc'))
files = Dir.glob(File.join(pRsc, '*.textile'))
htmlFiles = []
files.each do |src|
  htmlFile = File.join(pRsc, "#{File.basename(src, '.textile')}.html")
  desc 'Create opensource installers'
  task packName => htmlFile
  htmlFiles << htmlFile
  file htmlFile => src do
    Wikitext::HtmlFromTextile(htmlFile, src)
    # Remove wrong header at top of the file
    what = "<?xml version='1.0' encoding='utf-8' ?>"
    inhalt = IO.read(htmlFile.sub(what,''))
    File.open(htmlFile, 'w+'){|f| f.write(inhalt) }
  end
end if files.size > 0

task(install_xml => htmlFiles)
# What we want:
# Copy all common stuff from ../elexis-base/BuildElexis/rsc into _+'rsc'  e.g. *.html, i18n
# Copy specific elexis.<os> from ../elexis-base/BuildElexis/rsc/os into _+'target/{os}/rsc'
# the copy also all _+'rsc' into  _+'target/{os}' , eg. demoDB, deps/*.jar
# We use the following variables
# pRsc   ch.ngiger.elexis.opensource/rsc
# izRsc   ch.ngiger.elexis.opensource/target/rsc
# tRsc   ch.ngiger.elexis.opensource/target/rsc/#{os}
allProjects.each { |proj| task packName => project(proj).package(:plugin); dependencies << proj }
osPath = File.join(project.path_to(:target), 'os')
izRsc = File.join(project.path_to(:target), 'rsc')
dest = project.path_to(:target, "elexis-#{version}-installer.jar")
# productBundles = product['configurations'].sort.join(',')
# ----------------------------------------------------------------------------------------------------------------------------------
# I spent several hours trying to create with the traditional Eclipse IDE an „Eclipse product” which starts logging at start level 2.
# In vain. The problem is that the fragment ch.qos.logback.slf4 has as host org.slf4j.api.
# And when you try to start at start level org.slf4j.api early, you must also specify to load start level 2.
# And I did not find a solution how to do this in Indigo (3.7.2) via the GUI
# Using buildr.apache.org I simply force the osgi.bundles properties, by adding the following line to configuration/config.ini.
# ----------------------------------------------------------------------------------------------------------------------------------

productBundles = 'org.eclipse.core.runtime@start,org.eclipse.update.configurator@3:start,org.eclipse.equinox.common@2:start,ch.qos.logback.classic@2:start,ch.qos.logback.core@2:start,ch.qos.logback.slf4j@2,org.slf4j.api@2:start,org.slf4j.jul@2,org.eclipse.osgi.services@2:start,org.ekkescorner.logging.osgi@2:start,LogBackend@3:start'
installerConfigIni = %(#Product Runtime Configuration File (installerConfigIni)
# created by buildr.apache.org at #{Time.now}"
eclipse.application=#{product['application']}
osgi.bundles.defaultStartLevel=4
eclipse.product=#{product['id']}
osgi.splashPath=platform:/base/plugins/#{product['splash']}
osgi.bundles=#{productBundles}
osgi.instance.area=@user.home/elexis/workspace-#{version}
osgi.configuration.area=@user.home/elexis/configuration-#{version}
eclipse.vmargs=-XX:PermSize=126M -XX:MaxPermSize=257M
)

allJars = []
allCommonJars = []
allPlatforms.each {
  |tgtPlatform|
      jars2copy = []
      tgtPlatform['os_files'] = []
    (product['plugins'] + product['fragments']).each { |aRef|
                                                      arte = IzPack::getArtefactOrOsgiJar(project, aRef.to_s, tgtPlatform, jars)
                                                      if arte == nil
                                                        trace "No arte for #{aRef.to_s}"
                                                        next
                                                      end
                                                      next if arte.to_s.index('.source_')
                                                      jars2copy << arte
                                                      allJars << arte
                                                      if EclipseExtension::getPlatformFilter(arte)
                                                        tgtPlatform['os_files'] << arte
                                                      else
                                                        allCommonJars << arte
                                                      end
                                                    }
    jars2copy.each{ |jar| task dest => jar }
    tRsc    = File.join(osPath, IzPack::platform2path(tgtPlatform,'.'))
    task install_xml => tRsc
    task tRsc do
      unless File.directory?(tRsc)
        FileUtils.makedirs(tRsc)
        product = EclipseExtension::readProductInfo(ProductInfoFile)
        IzPack::installLauncherAndConfiguration(project, tRsc, product, tgtPlatform, installerConfigIni)
        # OS specific part for the launcher
      end
    end
    if IzPack::platform2path(tgtPlatform, '.').eql?(IzPack::platform2path(IzPack::getDefaultPlatform, '.'))
      tRsc    = File.join(osPath, IzPack::platform2path(tgtPlatform,'.'))
      destDir = File.join(project.path_to(:target), IzPack::platform2path(tgtPlatform, '.'))
      task test_installation => destDir
      task test_installation => File.join(destDir, 'plugins')
      task File.join(destDir, 'plugins') do FileUtils.makedirs(File.join(destDir, 'plugins')) end
      allProjects.each { |proj| task test_installation => project(proj).package(:plugin).to_s }
      task destDir => tRsc do
        FileUtils.makedirs(File.join(destDir, 'plugins'))
        FileUtils.cp_r(tRsc, File.dirname(destDir), :verbose => Buildr.application.options.trace, :preserve=>true)
        jars2copy.uniq.each {
          |jar|
          task test_installation => Buildr::Eclipse.installPlugin(jar.to_s, File.join(destDir, 'plugins'), tgtPlatform)
        }
      end
    end
}

allProjects.each{ |x| file(install_xml => project(x).package(:plugin).to_s) }
allCommonJars.each{ |x| file(install_xml => x.to_s) }
task(install_xml =>  [ test_installation, project.parent.task(:doc), demoZipFile, ] + osJars) do
  allProjects.each{ |x| project(x).package(:plugin).invoke }
  FileUtils.makedirs(path_to(:target), :verbose => Buildr.application.options.trace) unless File.directory?(path_to(:target))
  kernProjects.each{ |x| kernPack.addEclipseJar(project(x).package(:plugin).to_s) }
  chProjects.each{ |x| chPack.addEclipseJar(project(x).package(:plugin).to_s) }
  allCommonJars.each{ |x| libPack.addEclipseJar(x.to_s) }
  tgtPanel = File.join(path_to(:target), 'TargetPanel.txt.opensource')
  Buildr::write(tgtPanel, "$SYSTEM_user_home/elexis/bin/elexis-#{project.parent.version}")
  xm = Builder::XmlMarkup.new(:target=>File.open(install_xml, 'w+'), :indent => 2)
  xm.instruct! :xml, :version => '1.0', :encoding => 'utf-8', :standalone => "yes"
  xm.comment! %(Created by #{__FILE__} #{Time.now}
  * Copyright by Gerry Weirich 2006 - 2012.
  * Contributors:
    * G. Weirich - initial implementation
    * Niklaus Giger 2012 - moved to use Apache Buildr
  )
  xm.comment! 'This creates the izPack installer package'
  xm.installation('version'=>'1.0') {
    xm.tag!('info') {  xm.appname(project.name)
                      xm.appversion(project.version)
                      xm.authors{ |x| xm.author('name' => "www.elexis.ch", 'email' => 'info@elexis.ch') }
                      xm.url('http://www.elexis.ch')
                      }
    xm.guiprefs('width' => '800', 'height' => '600', 'resizable' => 'yes')
    xm.variables { |x| xm.variable('name' => 'appversion', 'value' => "#{project.parent.version}") }
    xm.panels { |x| xm.panel('classname' => 'HTMLInfoPanel')
                    xm.panel('classname' => 'HTMLLicencePanel')
                    xm.panel('classname' => 'TargetPanel')
                    xm.panel('classname' => 'PacksPanel')
                    xm.panel('classname' => 'InstallPanel')
                    xm.panel('classname' => 'ShortcutPanel')
                    xm.panel('classname' => 'FinishPanel')

                }
    xm.locale { |x| xm.langpack('iso3'=>'deu'); xm.langpack('iso3'=>'eng'); xm.langpack('iso3'=>'fra') }
    xm.native('type' => 'izpack', 'name' => 'ShellLink.dll')
    xm.conditions { |j|
      xm.condition('type' => 'variable', 'id'=>'is32bit') { |x| xm.name('SYSTEM_sun_arch_data_model'); xm.value('32') }
      xm.condition('type' => 'variable', 'id'=>'is64bit') { |x| xm.name('SYSTEM_sun_arch_data_model'); xm.value('64') }
                  }
    xm.resources{ |x|
                  xm.res('id' =>'TargetPanel.dir', 'src' => tgtPanel)
                  xm.res('id' =>'BSFActionsSpec.xml', 'src' => _('rsc/BSFActionsSpec.xml'))
                  xm.res('id' =>'copyConfiguration.bsh', 'src' => _('rsc/copyConfiguration.bsh'))
                  xm.res('id' =>'patchForLogback.bsh', 'src' => _('rsc/patchForLogback.bsh'))
                  xm.res('id' =>'unzipDemoDB.bsh', 'src' => _('rsc/unzipDemoDB.bsh'))
                  xm.res('id' =>'packsLang.xml_eng', 'src' => _('rsc/i18n/packsLang.xml_eng'))
                  xm.res('id' =>'packsLang.xml_fra', 'src' => _('rsc/i18n/packsLang.xml_fra'))
                  xm.res('id' =>'HTMLLicencePanel.licence', 'src' => _('rsc/license.html'))
                  xm.res('id' =>'HTMLInfoPanel.info', 'src' => _('rsc/info.html'), 'parse'=>'yes', 'type'=>'xml')
                  xm.res('id' =>'HTMLInfoPanel.info_fra', 'src' => _('rsc/info_fra.html'), 'parse'=>'yes', 'type'=>'xml')
                  xm.res('id' =>'HTMLInfoPanel.info_eng', 'src' => _('rsc/info_eng.html'), 'parse'=>'yes', 'type'=>'xml')
                  xm.res('id' =>'medelexis-logo.png', 'src' => _('rsc/elexis-logo.png'))
                  xm.res('id' =>'Win_shortcutSpec.xml', 'src' => _('rsc/Shortcuts_Windows.xml'))
                  xm.res('id' =>'Unix_shortcutSpec.xml', 'src' => _('rsc/Shortcuts_Linux.xml'))
                }
  xm.jar('src' => _('rsc/deps/apache/commons-logging/1.1.1/commons-logging-1.1.1.jar'), 'stage' => 'both')
  xm.jar('src' => _('rsc/deps/bsh/bsh/2.0b4/bsh-2.0b4.jar'), 'stage' => 'both')
  xm.jar('src' => _('rsc/deps/apache/bsf/2.4.0/bsf-2.4.0.jar'), 'stage' => 'both')
  xm.jar('src' => _('rsc/deps/apache/commons-io/1.4/commons-io-1.4.jar'), 'stage' => 'both')
  xm.listeners{ |x| xm.listener('installer' => 'BSFInstallerListener', 'uninstaller' => 'BSFUninstallerListener') }
  xm.summarylogfilepath('$INSTALL_PATH/Uninstaller/MySummary.htm')
  xm.packs {
  xm.pack('name' => 'DemoDB', 'required' => 'no', 'preselected'=>'no') {
    xm.description('DemoDB. Nützlich, um Elexis kennen zu lernen.')
    xm.singlefile('src'=> demoZipFile, 'target' =>"$INSTALL_PATH/demoDB_#{parent.version}.zip")
  }
  xm.pack('name' => 'Dokumentation', 'required' => 'no', 'preselected'=>'yes') {
    xm.description('Dokumentation. Enthält Handbuch und die Dokumentation vieler zusätzlicher Plug-Ins. Et le manuel français')
    Dir.glob(File.join(Elexis::get_deploy_dir, 'dox', '*')).each { |dir| xm.file('src'=> dir, 'targetdir' =>"$INSTALL_PATH/Dokumentation") }
    xm.singlefile('src' => handbuch, 'target' => '$INSTALL_PATH/elexis.pdf')
    xm.singlefile('src' => french, 'target' => '$INSTALL_PATH/manuel_français.pdf')
    xm.singlefile('src' => _('rsc/elexis.ico'), 'target' => '$INSTALL_PATH/elexis.ico')
    xm.singlefile('src' => _('rsc/elexis.xpm'), 'target' => '$INSTALL_PATH/elexis.xpm')
    xm.singlefile('src' => _('rsc/lizenz.txt'), 'target' => '$INSTALL_PATH/lizenz.txt')
    xm.singlefile('src' => _('rsc/LICENSE_de.rtf'), 'target' => '$INSTALL_PATH/LICENSE_de.rtf')
    xm.singlefile('src' => _('rsc/LICENSE_fr.rtf'), 'target' => '$INSTALL_PATH/LICENSE_fr.rtf')
    xm.singlefile('src' => _('rsc/LICENSE_it.rtf'), 'target' => '$INSTALL_PATH/LICENSE_it.rtf')
    xm.singlefile('src' => _('rsc/LICENSE'), 'target' => '$INSTALL_PATH/LICENSE')
                                                                                  } unless Wikitext::skipDoc
    allPacks.each { |aPack| aPack.emitIzPackXML(xm) }
    allPlatforms.each { |tgtPlatform|
      tRsc    = File.join(osPath, IzPack::platform2path(tgtPlatform,'.'))
      xm.pack('name' =>IzPack::platform2path(tgtPlatform,'.'), 'condition'=>tgtPlatform['condition'], 'required' => 'yes') {
      |x| xm.description(tgtPlatform['description'])
          xm.executable('targetfile' => tgtPlatform['executable'], 'keep' => 'true')
          if /macinstall/i.match(tgtPlatform['condition'])
            xm.singlefile('src' => os_p('rsc/macosx/starter-mac.ini'),
                        'target' =>  File.join('$INSTALL_PATH', product['launcher']+'.app', 'Contents', 'MacOS', product['launcher']+'ini'))
            xm.singlefile('src' => os_p('rsc/macosx/starter-mac'),
                        'target' =>  File.join('$INSTALL_PATH', product['launcher']+'.app', 'Contents', 'MacOS', product['launcher']))
          end
          tgtPlatform['os_files'].each { |jar| xm.singlefile('src' => jar, 'target' => jar.sub(File.dirname(jar), '$INSTALL_PATH/plugins')) }
          (Dir.glob(File.join(tRsc, '.*')) + Dir.glob(File.join(tRsc, '**', '*'))).each { |fileOrDir|
            next if File.directory?(fileOrDir)
            next if /eclipsec.exe/i.match(File.basename(fileOrDir))
            if /^launcher(|.exe)$/i.match(File.basename(fileOrDir))
              xm.singlefile('src' => fileOrDir,
                            'target' =>  File.join('$INSTALL_PATH', File.basename(tgtPlatform['executable'], '')))
            else
              xm.singlefile('src' => fileOrDir, 'target' =>  fileOrDir.sub(tRsc, '$INSTALL_PATH'))
            end
          }
        }
      }
    }
  }
  xm.target!().close
end

package(:izpack).enhance do
  allProjects.each{ |x|  project(x).package(:plugin).invoke  }
  FileUtils.makedirs(path_to(:target), :verbose => Buildr.application.options.trace) unless File.directory?(path_to(:target))
  chProjects.each{ |x| chPack.addEclipseJar(project(x).package(:plugin).to_s) }
  kernProjects.each{ |x| kernPack.addEclipseJar(project(x).package(:plugin).to_s) }
  allCommonJars.each{ |x| libPack.addEclipseJar(x.to_s) }
end
allCommonJars.each{ |x| task(install_xml => x.to_s); task(test_installation => x.to_s) }

allProjects.each{ |x|
  task test_installation =>  project(x).package(:plugin) do
      jarname = project(x).package(:plugin).to_s
      destDir = File.join(project.path_to(:target), tgtBase, 'plugins')
      FileUtils.makedirs(destDir, :verbose => Buildr.application.options.trace) unless File.directory?(destDir)
      destName = File.join(destDir, File.basename(jarname))
      Buildr::Eclipse.installPlugin(jarname.to_s, destDir, tgtBase)
  end
}

task(test_installation).enhance do
  logbackXml = File.join( File.expand_path('~'), 'elexis', 'logback.xml') # java.lang.System.getProperty('user.home')
  fileName   = File.join(project.path_to(:target), tgtBase, product['launcher']+'.ini')
  File.open(fileName, "a").puts("\n-Dlogback.configurationFile=#{logbackXml}\n")
end

#--------------------------------------------------------------------------------------------
# define some integration tests
#--------------------------------------------------------------------------------------------

IzPack::checkAbsent(project, install_xml, '$INSTALL_PATH/eclipsec.exe')
IzPack::checkAbsent(project, install_xml, '$INSTALL_PATH/laucher.exe')

if Dir.glob('**/ch.elexis.icpc/.project').size == 1
  IzPack::checkOne(project, install_xml, '$INSTALL_PATH/plugins/ch.elexis.icpc-')
end
if Dir.glob('**/com.hilotec.elexis.opendocument/.project').size == 1
  IzPack::checkOne(project, install_xml, '$INSTALL_PATH/plugins/com.hilotec.elexis.opendocument-')
end
if Dir.glob('**/noatext/.project').size == 1
  IzPack::checkOne(project, install_xml, '$INSTALL_PATH/plugins/com.jsigle.noatext_jsl-')
end
if Dir.glob('**/ch.medelexis.text.templator/.project').size == 1
  IzPack::checkOne(project, install_xml, '$INSTALL_PATH/plugins/ch.medelexis.text.templator-')
end
IzPack::checkOne(project, install_xml, '$INSTALL_PATH/configuration/logback.xml')
IzPack::checkOne(project, install_xml, '$INSTALL_PATH/elexis"')
IzPack::checkOne(project, install_xml, "$INSTALL_PATH/elexis.app/Contents/MacOS/#{product['launcher']}")
IzPack::checkOne(project, install_xml, "$INSTALL_PATH/elexis.app/Contents/MacOS/#{product['launcher']}.ini")
IzPack::checkOne(project, install_xml, '$INSTALL_PATH/elexis.exe')
# IzPack::checkOne(project, install_xml, '$INSTALL_PATH/elexis.ico') 
IzPack::checkOne(project, install_xml, '$INSTALL_PATH/elexis.ini')
IzPack::checkOne(project, install_xml, '$INSTALL_PATH/elexis.xpm') unless Wikitext::skipDoc
IzPack::checkOne(project, install_xml, '$INSTALL_PATH/plugins/LogBackend_')
IzPack::checkOne(project, install_xml, '$INSTALL_PATH/plugins/ch.elexis.core_')
IzPack::checkOne(project, install_xml, '$INSTALL_PATH/plugins/ch.elexis.h2.connector_')
IzPack::checkOne(project, install_xml, '$INSTALL_PATH/plugins/ch.elexis.mysql.connector')
IzPack::checkOne(project, install_xml, '$INSTALL_PATH/plugins/ch.qos.logback.core_')
IzPack::checkOne(project, install_xml, '$INSTALL_PATH/plugins/ch.rgw.utility_')
IzPack::checkOne(project, install_xml, '$INSTALL_PATH/plugins/org.eclipse.equinox.launcher.cocoa.macosx.x86_64_1')
IzPack::checkOne(project, install_xml, '$INSTALL_PATH/plugins/org.eclipse.equinox.launcher.gtk.linux.x86_1')
IzPack::checkOne(project, install_xml, '$INSTALL_PATH/plugins/org.eclipse.equinox.launcher.gtk.linux.x86_64_1')
IzPack::checkOne(project, install_xml, '$INSTALL_PATH/plugins/org.eclipse.equinox.launcher.win32.win32.x86_1')
IzPack::checkOne(project, install_xml, '$INSTALL_PATH/plugins/org.eclipse.equinox.launcher.win32.win32.x86_64_1')
IzPack::checkOne(project, install_xml, '$INSTALL_PATH/plugins/org.eclipse.ui.forms_')
IzPack::checkOne(project, install_xml, '$INSTALL_PATH/plugins/org.slf4j.api_')
IzPack::checkOne(project, install_xml, 'ShortcutPanel')
IzPack::checkOne(project, install_xml, 'Win_shortcutSpec.xml')
IzPack::checkOne(project, install_xml, 'installation')
# IzPack::checkOne(project, install_xml, '$INSTALL_PATH/Dokumentation/ch.elexis/script-show.pdf')
